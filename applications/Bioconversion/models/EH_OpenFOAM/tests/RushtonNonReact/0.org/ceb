/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      ceb;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -3 0 0 0 0 0];

internalField   uniform 0.0;

boundaryField
{
    bottom
    {
        type            codedMixed;
        refValue        uniform 0.0;
        refGradient     uniform 0;
        valueFraction   uniform 0;
        name            noflux_ceb_bot;
        code            
        #{
            const fvPatch& boundaryPatch = patch();
            const fvBoundaryMesh& boundaryMesh = boundaryPatch.boundaryMesh();
            const fvMesh& mesh = boundaryMesh.mesh();
            const vectorField& Cf = boundaryPatch.Cf();
            const labelList& faceOwner = boundaryPatch.faceCells();

            scalar zvel=0.0;
            scalar vface=0.0;

            scalar delta;
            scalar D=8.71e-7;

            const volScalarField& ceb_cc  = db().lookupObject<volScalarField>("ceb");
            const fvPatchField<vector>& Uf = boundaryPatch.lookupPatchField<volVectorField,vector>("U");
            const fvPatchField<vector>& svel = boundaryPatch.lookupPatchField<volVectorField,vector>("setlvel");
          
            scalarField Dis = 1.0/mesh.deltaCoeffs().boundaryField()[boundaryPatch.index()];

            vectorField nhat = this->patch().nf();
            scalar t=db().time().value();
            int cellid;

            forAll(Cf, faceI)
            {
                cellid=faceOwner[faceI];
                delta=Dis[faceI];

                zvel   = svel[faceI][2];
                vface  = zvel*nhat[faceI][2];

                this->refGrad()[faceI]  = 0.0;
                this->valueFraction()[faceI] = 1.0;
                this->refValue()[faceI] = ceb_cc[cellid]*exp(vface*delta/D);
              }
        #};
    }
    outlet
    {
        type            codedMixed;
        refValue        uniform 0.0;
        refGradient     uniform 0;
        valueFraction   uniform 0;
        name            noflux_ceb_outlet;
        code            
        #{
            const fvPatch& boundaryPatch = patch();
            const fvBoundaryMesh& boundaryMesh = boundaryPatch.boundaryMesh();
            const fvMesh& mesh = boundaryMesh.mesh();
            const vectorField& Cf = boundaryPatch.Cf();
            const labelList& faceOwner = boundaryPatch.faceCells();

            scalar zvel=0.0;
            scalar vface=0.0;

            scalar delta;
            scalar D=8.71e-7;

            const volScalarField& ceb_cc  = db().lookupObject<volScalarField>("ceb");
            const fvPatchField<vector>& Uf = boundaryPatch.lookupPatchField<volVectorField,vector>("U");
            const fvPatchField<vector>& svel = boundaryPatch.lookupPatchField<volVectorField,vector>("setlvel");
          
            scalarField Dis = 1.0/mesh.deltaCoeffs().boundaryField()[boundaryPatch.index()];

            vectorField nhat = this->patch().nf();
            scalar t=db().time().value();
            int cellid;

            forAll(Cf, faceI)
            {
                cellid=faceOwner[faceI];
                delta=Dis[faceI];

                zvel   = svel[faceI][2];
                vface  = zvel*nhat[faceI][2];

                this->refGrad()[faceI]  = 0.0;
                this->valueFraction()[faceI] = 1.0;
                this->refValue()[faceI] = ceb_cc[cellid]*exp(vface*delta/D);
              }
        #};
    }
    propeller
    {
        type            codedMixed;
        refValue        uniform 0.0;
        refGradient     uniform 0;
        valueFraction   uniform 0;
        name            noflux_ceb_prop;
        code            
        #{
            const fvPatch& boundaryPatch = patch();
            const fvBoundaryMesh& boundaryMesh = boundaryPatch.boundaryMesh();
            const fvMesh& mesh = boundaryMesh.mesh();
            const vectorField& Cf = boundaryPatch.Cf();
            const labelList& faceOwner = boundaryPatch.faceCells();

            scalar zvel=0.0;
            scalar vface=0.0;

            scalar delta;
            scalar D=8.71e-7;

            const volScalarField& ceb_cc  = db().lookupObject<volScalarField>("ceb");
            const fvPatchField<vector>& Uf = boundaryPatch.lookupPatchField<volVectorField,vector>("U");
            const fvPatchField<vector>& svel = boundaryPatch.lookupPatchField<volVectorField,vector>("setlvel");
          
            scalarField Dis = 1.0/mesh.deltaCoeffs().boundaryField()[boundaryPatch.index()];

            vectorField nhat = this->patch().nf();
            scalar t=db().time().value();
            int cellid;

            forAll(Cf, faceI)
            {
                cellid=faceOwner[faceI];
                delta=Dis[faceI];

                zvel   = svel[faceI][2];
                vface  = zvel*nhat[faceI][2];

                this->refGrad()[faceI]  = 0.0;
                this->valueFraction()[faceI] = 1.0;
                this->refValue()[faceI] = ceb_cc[cellid]*exp(vface*delta/D);
              }
        #};
    }
    lateralWall
    {
        type            zeroGradient;
    }
    inside_to_hub
    {
        type            empty;
    }
    inside_to_hub_copy
    {
        type            empty;
    }
    hub_to_rotor
    {
        type            empty;
    }
    hub_to_rotor_copy
    {
        type            empty;
    }
}


// ************************************************************************* //
